A list of recommended starting points for developing a web app. It's written by an astronomer, so take them with a grain of salt.

* Presentational
** HTML & CSS
- Mozilla Developer Network (MDN) (https://developer.mozilla.org/en-US/docs/Web/HTML) is a great reference. The same link also features guides for CSS and Javascript, and guides on how to use the Developer Tools in each browser.

- Dive into HTML5 (http://diveintohtml5.info) is an online e-book on HTML5 specifically (good if you already know the basics of HTML).

** Frameworks
- Bootstrap (http://getbootstrap.com) is one of the most common frameworks out there. It will give you a nice basis for designing your application and making sure it resizes and looks (more or less) the same on each browser/platform. It also provides a default theme that gives your page a professional look without any effort on your part (see e.g. http://www.stefanom.org/playpen/Trends/keywords/).

- UIKit (http://getuikit.com) is similar and also a great to get started.

- I used to use JQuery UI (https://jqueryui.com) instead of Bootstrap in the past. It's also a good place to get started, although it only provides you with components (I find Bootstrap to be a more complete solution for the kind of stuff I develop).

* Interactivity
** JavaScript
- The book "JavaScript: the good parts" by Douglas Crockford is a great, succinct book. 

- MDN is again a great reference.

- JQuery (http://jquery.com) makes the interaction with the webpage elements (the DOM) a lot less verbose and fraught with pitfalls. If you ever look at the source code for webpage scripts, that weird "$" symbol usually stands for the JQuery library namespace.

- Underscore.js (http://underscorejs.org) is a set of utility functions that extend the default JavaScript standard library. I also found it great for managing asynchronous functions. (Like above, the namespace is a symbol: unsurprisingly, it's "_").

- Emscripten (https://github.com/kripken/emscripten/wiki) translates C and C++ code into JavaScript. (You can even stack layers and compile the interpreter for your favorite language, so that you could run, say, Python in your web app!). I have some experience with this, so feel free to contact me if you need help.

** Plotting
- Highcharts (http://www.highcharts.com) is a great turn-key library for plotting, especially if you have simple needs (line/scatter/histogram charts). Demos: http://www.highcharts.com/demo/

- Variance (https://variancecharts.com) just came out and looks awesome. Looks a bit harder to use than Highcharts. If you scroll down to the "What makes Variance unique" section, there are pointers to a few other useful libraries.

- Paper.js (http://paperjs.org) is a really cool library for doing vector graphics and animations. It looks quite a bit simpler to use than its competitors. I used it to animate Super Planet Crush.

* Misc
- Writing code in a good editor makes all the difference: among free, cross-platform tools, I can recommend Emacs (for a lightweight editor with a lot of shortcuts), Sublime Text (or TextMate), or NetBeans (a full-featured IDE). Lots of other great tools floating around the web.

- If you get into a "I don't know what the heck is going on" situation, Stack Overflow (http://stackoverflow.com) probably has the answer.

- Node.js is a web server that runs JavaScript server-side. It can also be used to run JavaScript from the command line (just like a Python interpreter), so that you can test your scripts /outside/ the browser.

- Chrome and Firefox both have excellent tools for debugging both your HTML/CSS and your scripts.
